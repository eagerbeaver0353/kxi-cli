---
default:
  tags:
    - k8s-aws-tools
  interruptible: true

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - project: "kxdev/shared-tools/ci-templates"
    ref: main
    file:
      - "insights/test.yaml"
      - "security/security.yaml"
      - "deploy/record-results.yml"
      - "insights/data-science/common.yaml"
      - "release/promote-release-version.yaml"

stages:
  - build
  - test
  - visualisation
  - report-results
  - security
  - publish
  - docs
  - release

variables:
  PIP_EXTRA_INDEX_URLS: "https://__token__:$CI_DEVOPS_TOKEN@gitlab.com/api/v4/projects/35913526/packages/pypi/simple"
  PIP_ROOT_USER_ACTION: ignore
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONUNBUFFERED: 1

.default-rules:
  rules:
    - !reference [.pakxcli-integration-rules, rules]
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_MERGE_REQUEST_IID

.release-only-rules:
  rules:
    - if: $CI_COMMIT_TAG

# main + release/*
.protected-branches-rules:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"

build:wheel:
  stage: build
  image: python:3
  needs: []
  rules:
    - !reference [.default-rules, rules]
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - python3 -m pip install --upgrade build
  script:
    - SETUPTOOLS_SCM_DEBUG=1 python3 -m build
  artifacts:
    paths:
      - dist

.unit-tests:
  stage: test
  image: python:3
  needs: []
  rules:
    - !reference [.default-rules, rules]
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - python3 -m pip install --upgrade build
    - SETUPTOOLS_SCM_DEBUG=1 python3 -m build
    - pip install .[dev]
    - pip install dist/*.whl
    - export KUBECONFIG=$(pwd)/tests/files/test-kube-config
  script:
    - ./test-and-coverage.sh unit
  artifacts:
    paths:
      - htmlcov
      - report.unit.xml
      - coverage.unit.xml
      - .coverage.unit

integration-tests:
  stage: test
  needs: []
  rules:
    - !reference [.default-rules, rules]
  image:
    name: python:3.10
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - python3 -m pip install --upgrade build
    - SETUPTOOLS_SCM_DEBUG=1 python3 -m build
    - pip install .[dev]
    - pip install dist/*.whl
    - mkdir -p /root/.insights
    - cp tests/files/integration-cli-config /root/.insights/cli-config
    - echo "admin.password = $KEYCLOAK_ADMIN_PASSWORD" >> /root/.insights/cli-config
    - export KUBECONFIG=$(pwd)/tests/files/test-kube-config
  script:
    - ./test-and-coverage.sh integration
  artifacts:
    paths:
      - htmlcov
      - report.integration.xml
      - coverage.integration.xml
      - .coverage.integration

combine-test-metrics:
  stage: visualisation
  rules:
    - !reference [.default-rules, rules]
  image:
    name: python:3.10
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - pip install .[dev]
    - pip install junitparser
  script:
    # combines coverage data files named .coverage.* and output a new xml report
    - coverage combine
    - coverage report
    - coverage xml
    # merges multiple junit xml files into one file
    - junitparser merge report.unit.xml report.integration.xml report.xml
  coverage: /^TOTAL.*\s+(\d+%)$/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
    paths:
      - coverage.xml
      - report.xml
  needs:
    - unit-tests-3.8
    - integration-tests

unit-tests-3.8:
  extends: .unit-tests
  image: python:3.8

unit-tests-3.9:
  extends: .unit-tests
  image: python:3.9

unit-tests-3.10:
  extends: .unit-tests
  image: python:3.10

pytest-kpis-coverage:
  stage: visualisation
  needs:
    - combine-test-metrics
  variables:
    ARTIFACT_PATH: "$CI_PROJECT_DIR/coverage.xml"
    FORMAT: python
  extends: .process-coverage
  rules:
    - !reference [.default-rules, rules]
  allow_failure: true

pytest-kpis-results:
  stage: visualisation
  needs:
    - combine-test-metrics
  variables:
    ARTIFACT_PATH: "$CI_PROJECT_DIR/report.xml"
    FORMAT: python_junit
  extends: .process-results
  rules:
    - !reference [.default-rules, rules]
  allow_failure: true

send-report-to-insights:
  stage: report-results
  extends: .record-results
  needs:
    - pytest-kpis-results
    - pytest-kpis-coverage
  rules:
    - !reference [.default-rules, rules]
  allow_failure: true

publish package:
  stage: publish
  image: python:3
  variables:
    PYPI_URL: "$INSIGHTS_DEV_NEXUS_URL"
    TWINE_USERNAME: "$INT_NEXUS_USER_RW"
    TWINE_PASSWORD: "$INT_NEXUS_PASS_RW"
  before_script:
    - python -m pip install --upgrade twine
  script:
    - python -m twine upload  --non-interactive --repository-url "${PYPI_URL}/repository/kxi/" dist/*.whl
  rules:
    - if: $CI_COMMIT_TAG

publish package external kxi-pypi-public:
  stage: publish
  image: python:3
  variables:
    PYPI_URL: "$INSIGHTS_PROD_NEXUS_URL"
    TWINE_USERNAME: "$EXT_NEXUS_USER_RW"
    TWINE_PASSWORD: "$EXT_NEXUS_PASS_RW"
  before_script:
    - python -m pip install --upgrade twine
  script:
    - python -m twine upload  --non-interactive --repository-url "${PYPI_URL}/repository/kxi-pypi-public/" dist/*.whl
  rules:
    - if: $CI_COMMIT_TAG
      when: manual

pages:merge-request:
  image: python:3.8
  stage: docs
  needs: []
  variables:
    PREVIEW_ROOT: "https://kxdev.gitlab.io/-/kxinsights/kxi-cli"
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: "$PREVIEW_ROOT/-/jobs/$CI_JOB_ID/artifacts/public/cli/index.html"
    auto_stop_in: 3 days
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - pip install .[doc]
  script:
    - mkdocs build --strict
    - mv site public/
  artifacts:
    paths:
      - public
  rules:
    # Run job on Merge Request
    - if: $CI_MERGE_REQUEST_ID

pages:
  image: python:3.8
  stage: docs
  variables:
    PREVIEW_ROOT: "https://kxdev.gitlab.io/-/kxinsights/kxi-cli"
  environment:
    name: main
    url: "$PREVIEW_ROOT/-/jobs/$CI_JOB_ID/artifacts/public/cli/index.html"
  before_script:
    - !reference [.setup-global-pip-config, before_script]
    - pip install .[doc]
  script:
    - mkdocs build --strict
    - mv site public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

sonarqube-check:
  stage: security
  extends: .sonar-template
  needs:
    - unit-tests-3.8
    - integration-tests
  rules:
    - !reference [.default-rules, rules]

spell-check:
  stage: test
  extends:
    - .cspell
  needs: []
  rules:
    - !reference [.default-rules, rules]
  script:
    - cspell "kxicli/**/*.py"

update-release-version:
  extends: .update_component_version
  variables:
    INSIGHTS_COMPONENT_NAME: "kxi-cli"
  needs:
    - publish package

secret_detection:
  stage: security
  needs: []
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"
  artifacts:
    paths:
      - gl-secret-detection-report.json
    reports:
      secret_detection: gl-secret-detection-report.json

snyk-sca-test:
  stage: security
  extends:
    - .snyk-dep-scan
  needs: []
  script:
    - |
      #!/bin/bash
      set -xe
      DEBUG=*snyk* snyk test --file=requirements.txt --command=python3 \
        --severity-threshold=high \
        --policy-path=${CI_PROJECT_DIR}/.snyk
  rules:
    - !reference [.default-rules, rules]

snyk-sca-monitor:
  stage: security
  extends:
    - .snyk-dep-scan
  needs: []
  script:
    - |
      #!/bin/bash
      set -xe
      snyk monitor --file=requirements.txt --command=python3 \
        --project-name=${CI_PROJECT_NAME} --target-reference=${CI_COMMIT_REF_NAME}
  rules:
    - !reference [.protected-branches-rules, rules]
    - !reference [.release-only-rules, rules]
