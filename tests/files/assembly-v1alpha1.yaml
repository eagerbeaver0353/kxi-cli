apiVersion: insights.kx.com/v1alpha1
kind: Assembly
metadata:
  name: market-data
  labels:
    env: dev
spec:
  description: "My Sample Assembly"
  # attach: true
  podSecurityContext:
    fsGroup: 65534
    runAsUser: 65534
  #  Set global Image Repo
  # imageRepo: "image.registry.com/"
  # imagePullSecrets:
  #   - name: internal-nexus-cred
  # Set Assembly Lics - Or take from operator cmd line
  # license:
  #   lic_user: "user name"
  #   lic_email: "user.name@kx.com"
  labels:
    type: verbose
  tables:
    trace:
      description: Manufacturing trace data
      type: partitioned
      shards: 11
      blockSize: 10000
      prtnCol: readTS
      sortColsOrd: [sensorID]
      sortColsDisk: [sensorID]
      columns:
        - name: sensorID
          description: Sensor Identifier
          type: int
          attrMem: grouped
          attrDisk: parted
          attrOrd: parted
        - name: readTS
          description: Reading timestamp
          type: timestamp
        - name: captureTS
          description: Capture timestamp
          type: timestamp
        - name: valFloat
          description: Sensor value
          type: float
        - name: qual
          description: Reading quality
          type: byte
        - name: alarm
          description: Enumerated alarm flag
          type: byte
        - name: updateTS
          description: Update timestamp
          type: timestamp
  qlog:
    directory: "/opt/kx/config"
    formatMode: "text"
    endpoints:
      - "fd://stdout"
    routings:
      ALL: "INFO"
  mounts:
    rdb:
      type: stream
      baseURI: none
      partition: none
    idb:
      type: local
      baseURI: file:///data/db/idb
      partition: ordinal
      volume:
        storageClass: "rook-cephfs"
        size: "20Gi"
        accessModes: 
          # - "ReadWriteOnce"
          - ReadWriteMany

    hdb:
      type: local
      baseURI: file:///data/db/hdb
      partition: date
      dependency:
      - idb
      volume:
        storageClass: "rook-cephfs"
        size: "20Gi"
        accessModes: 
          # - "ReadWriteOnce"
          - ReadWriteMany
  metrics: 
    enabled: true
    frequency: 5
    handler:
      po: true
      pc: true
      wo: true
      wc: true
      pg: true
      ps: true
      ws: true
      ph: true
      pp: true
      ts: true
    serviceMonitor: 
      enabled: true
      # interval: "10s"
      # path: "/metrics"
      # release: kx-prom
  discovery:
    enabled: true
    # registry: "kxi-discovery-service:8761"
    heartbeatSecs: 30
    leaseExpirySecs: 90
    callTimeoutSecs: 10
    maxPeriodRetrySecs: 30
    refreshServicesSecs: 60
  elements:
    sp:
      description: Processor of streams
      pipelines:
        sdtransform:
          protectedExecution: false
          # If we needed a python image we could set it here - but this should default to a q kxi-sp-worker image
          # controllerImage: 
          #   repo: gcr.io/cloudpak
          #   tag: 0.10.5
          #   component: kxi-sp-controller
          # workerImage: 
          #   repo: gcr.io/cloudpak
          #   tag: 0.10.5
          #   component: kxi-sp-worker
          source: north
          destination: south
          minWorkers: 1
          maxWorkers: 1
          workerThreads: 4
          spec: |-
              sensor: ([]sensorID:`g#"i"$();extSensorID:`$();name:`$();typ:"x"$();createTS:"p"$();updateTS:"p"$());
              trace: ([]sensorID:`g#"i"$();readTS:"p"$();captureTS:"p"$();valFloat:"f"$();qual:"h"$();alarm:"x"$();updateTS:"p"$());

              .enum.alarm:``NORMAL`HIGH!(::;0x01;0x02)
              .enum.qual:``GOOD!(::;0x01)

              // Incoming event format
              // list(symbol;dict)

              // Transformations:
              // - format into table
              // - scale values
              // - translate timestamps
              // - set alarm based off values
              // - sort by sensorID and readTS
              traceMapFn:{
                  rawData:x 1;
                  svals:rawData[`val]*rawData`scaling;
                  rts:rawData[`ts]+rawData`timeOffset;
                  (`trace;
                    `sensorID`readTS xasc flip cols[trace]!(rawData`id;rts;rawData`ts;svals;.enum.qual`GOOD;
                      ?[5000f<svals;.enum.alarm`HIGH;.enum.alarm`NORMAL];.z.p)
                  )
                  }

              logLatency:{
                  if[count l:.qsp.get[`latencyCacher; ::];log.info("Approximate ingress ems latency, %N";l)];
                  }

              .tm.add[`latency;(`logLatency;::);10000;0];

              .qsp.run
                  .qsp.read.fromRT[]
                  .qsp.map[{[op;md;data] .qsp.set[op;md;.z.p-data 2];data}; .qsp.use`name`state!(`latencyCacher; ())]
                  .qsp.filter[{`trace=x 0}]
                  .qsp.map[traceMapFn]
                  .qsp.write.toRT[]

    sm:
      size: 1
      # Set Storage Manager Image - Or take from operator cmd line
      # image:
      #   component: "kxi-sm"
      #   tag: 0.9.14
      port:
        name: "sm"
        containerPort: 10001
      eoi:
      # Set Storage Manager EOI Image - Or take from operator cmd line
        # image:
        #   component: "kxi-sm-eoi"
        #   tag: 0.9.14
        port:
          name: "eoi"
          containerPort: 10002
      eod:
      # Set Storage Manager EOD Image - Or take from operator cmd line
        # image:
        #   component: "kxi-sm-eod"
        #   tag: 0.9.14
        port:
          name: "eod"
          containerPort: 10003
      dbm:
        port:
          name: "dbm"
          containerPort: 10004
      source: south
      tiers:
        - name: streaming
          mount: rdb
        - name: interval
          mount: idb
          # store: file:///data/db/idb/data
          schedule:
            freq: 00:10:00
            snap: 00:00:00
        - name: recent
          mount: hdb
          # store: file:///data/db/hdb/data
          schedule:
            freq: 1D00:00:00
            snap:   01:35:00
          retain:
            time: 3 Months
      service:
        type: ClusterIP
        clusterIP: "None"
        targetPort:
          name: "sm"
          protocol: "TCP"
          port: 10001
          targetPort: "sm"
      rtLogVolume:
        mountPath: "/opt/rt/logs"
        accessModes: 
          - "ReadWriteOnce"
        storageClass: "rook-cephfs"
        size: "20G"
    dap:
      instances:
        idb:
          size: 3
          port:
            name: "dap"
            containerPort: 5080
          mountName: idb
          service:
            type: ClusterIP
            clusterIP: "None"
            targetPort:
              name: "dap"
              protocol: "TCP"
              port: 5080
              targetPort: "dap"
        hdb:
          size: 3
          port:
            name: "dap"
            containerPort: 5080
          mountName: hdb
          service:
            type: ClusterIP
            clusterIP: "None"
            targetPort:
              name: "dap"
              protocol: "TCP"
              port: 5080
              targetPort: "dap"
        rdb:
          size: 3
          port:
            name: "dap"
            containerPort: 5080
          tableLoad: empty
          mountName: rdb
          service:
            type: ClusterIP
            clusterIP: "None"
            targetPort:
              name: "dap"
              protocol: "TCP"
              port: 5080
              targetPort: "dap"
          source: south
          rtLogVolume:
            mountPath: "/opt/rt/logs"
            accessModes: 
              - "ReadWriteOnce"
            storageClass: "rook-cephfs"
            size: "20G"
    sequencer:
      south:
        size: 3
        protocol: "rt"
        topicConfig:
          topicPrefix: "rt-"
        topicConfigDir: "/config/topics"
        volume:
          mountPath: "/rt/"
          subPaths:
            in: "in"
            out: "out"
            cp: "state"
          accessModes: 
            - "ReadWriteOnce"
          storageClass: "rook-cephfs"
          size: "20G"
        port:
          name: "internal"
          containerPort: 6000
        service:
          type: ClusterIP
          clusterIP: "None"
          targetPort:
            name: "internal"
            protocol: "TCP"
            port: 6000
            targetPort: "internal"
      north:
        size: 3
        protocol: "rt"
        topicConfig:
          topicPrefix: "rt-"
          subTopic: "data"
        topicConfigDir: "/config/topics"
        volume:
          mountPath: "/rt/"
          subPaths:
            in: "in"
            out: "out"
            cp: "state"
          accessModes: 
            - "ReadWriteOnce"
          storageClass: "rook-cephfs"
          size: "20G"
        port:
          name: "external"
          containerPort: 6000
        service:
          type: ClusterIP
          clusterIP: "None"
          targetPort:
            name: "external"
            protocol: "TCP"
            port: 6000
            targetPort: "external"

