apiVersion: insights.kx.com/v1
kind: Assembly
metadata:
  name: basic-assembly2
  labels:
    env: dev
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: '{"apiVersion":"insights.kx.com/v1","kind":"Assembly","metadata":{"name":"basic-assembly2","labels":{"env":"dev"}},"spec":{"attach":false,"labels":{"type":"basic"},"tables":{"trace":{"description":"Manufacturing trace data","type":"partitioned","blockSize":10000,"prtnCol":"readTS","sortColsOrd":["sensorID"],"sortColsDisk":["sensorID"],"columns":[{"name":"sensorID","description":"Sensor Identifier","type":"int","attrMem":"grouped","attrDisk":"parted","attrOrd":"parted"},{"name":"readTS","description":"Reading timestamp","type":"timestamp"},{"name":"captureTS","description":"Capture timestamp","type":"timestamp"},{"name":"valFloat","description":"Sensor value","type":"float"},{"name":"qual","description":"Reading quality","type":"byte"},{"name":"alarm","description":"Enumerated alarm flag","type":"byte"},{"name":"updateTS","description":"Update timestamp","type":"timestamp"}]}},"mounts":{"rdb":{"type":"stream","baseURI":"none","partition":"none"},"idb":{"type":"local","baseURI":"file:///data/db/idb","partition":"ordinal"},"hdb":{"type":"local","baseURI":"file:///data/db/hdb","partition":"date","dependency":["idb"]}},"elements":{"sp":{"description":"Processor of streams","pipelines":{"sdtransform":{"protectedExecution":false,"source":"north","destination":"south","spec":"sensor: ([]sensorID:`g#\"i\"$();extSensorID:`$();name:`$();typ:\"x\"$();createTS:\"p\"$();updateTS:\"p\"$());\ntrace: ([]sensorID:`g#\"i\"$();readTS:\"p\"$();captureTS:\"p\"$();valFloat:\"f\"$();qual:\"h\"$();alarm:\"x\"$();updateTS:\"p\"$());\n\n.enum.alarm:``NORMAL`HIGH!(::;0x01;0x02)\n.enum.qual:``GOOD!(::;0x01)\n\n// Incoming event format\n// list(symbol;dict)\n\n// Transformations:\n// - format into table\n// - scale values\n// - translate timestamps\n// - set alarm based off values\n// - sort by sensorID and readTS\ntraceMapFn:{\n    rawData:x 1;\n    svals:rawData[`val]*rawData`scaling;\n    rts:rawData[`ts]+rawData`timeOffset;\n    (`trace;\n      `sensorID`readTS xasc flip cols[trace]!(rawData`id;rts;rawData`ts;svals;.enum.qual`GOOD;\n        ?[5000f<svals;.enum.alarm`HIGH;.enum.alarm`NORMAL];.z.p)\n    )\n    }\n\nlogLatency:{\n    if[count l:.qsp.get[`latencyCacher; ::];log.info(\"Approximate ingress latency, %N\";l)];\n    }\n\n.tm.add[`latency;(`logLatency;::);10000;0];\n\n.qsp.run\n    .qsp.read.fromStream[]\n    .qsp.map[{[op;md;data] .qsp.set[op;md;.z.p-data 2];data}; .qsp.use`name`state!(`latencyCacher; ())]\n    .qsp.filter[{`trace=x 0}]\n    .qsp.map[traceMapFn]\n    .qsp.write.toStream[]"}}},"sm":{"source":"south","tiers":[{"name":"streaming","mount":"rdb"},{"name":"interval","mount":"idb","schedule":{"freq":"00:10:00","snap":"00:00:00"}},{"name":"recent","mount":"hdb","schedule":{"freq":"1D00:00:00","snap":"01:35:00"},"retain":{"time":"3 Months"}}]},"dap":{"instances":{"idb":{"mountName":"idb"},"hdb":{"mountName":"hdb"},"rdb":{"tableLoad":"empty","mountName":"rdb","source":"south"}}},"sequencer":{"south":{"external":false},"north":{"external":true,"topicConfig":{"subTopic":"basic-assembly"}}}}}}'
spec:
  attach: false
  labels:
    type: basic
  tables:
    trace:
      description: Manufacturing trace data
      type: partitioned
      blockSize: 10000
      prtnCol: readTS
      sortColsOrd: [sensorID]
      sortColsDisk: [sensorID]
      columns:
        - name: sensorID
          description: Sensor Identifier
          type: int
          attrMem: grouped
          attrDisk: parted
          attrOrd: parted
        - name: readTS
          description: Reading timestamp
          type: timestamp
        - name: captureTS
          description: Capture timestamp
          type: timestamp
        - name: valFloat
          description: Sensor value
          type: float
        - name: qual
          description: Reading quality
          type: byte
        - name: alarm
          description: Enumerated alarm flag
          type: byte
        - name: updateTS
          description: Update timestamp
          type: timestamp
  mounts:
    rdb:
      type: stream
      baseURI: none
      partition: none
    idb:
      type: local
      baseURI: file:///data/db/idb
      partition: ordinal
    hdb:
      type: local
      baseURI: file:///data/db/hdb
      partition: date
      dependency:
      - idb
  elements:
    sp:
      description: Processor of streams
      pipelines:
        sdtransform:
          protectedExecution: false
          source: north
          destination: south
          spec: |-
              sensor: ([]sensorID:`g#"i"$();extSensorID:`$();name:`$();typ:"x"$();createTS:"p"$();updateTS:"p"$());
              trace: ([]sensorID:`g#"i"$();readTS:"p"$();captureTS:"p"$();valFloat:"f"$();qual:"h"$();alarm:"x"$();updateTS:"p"$());

              .enum.alarm:``NORMAL`HIGH!(::;0x01;0x02)
              .enum.qual:``GOOD!(::;0x01)

              // Incoming event format
              // list(symbol;dict)

              // Transformations:
              // - format into table
              // - scale values
              // - translate timestamps
              // - set alarm based off values
              // - sort by sensorID and readTS
              traceMapFn:{
                  rawData:x 1;
                  svals:rawData[`val]*rawData`scaling;
                  rts:rawData[`ts]+rawData`timeOffset;
                  (`trace;
                    `sensorID`readTS xasc flip cols[trace]!(rawData`id;rts;rawData`ts;svals;.enum.qual`GOOD;
                      ?[5000f<svals;.enum.alarm`HIGH;.enum.alarm`NORMAL];.z.p)
                  )
                  }

              logLatency:{
                  if[count l:.qsp.get[`latencyCacher; ::];log.info("Approximate ingress latency, %N";l)];
                  }

              .tm.add[`latency;(`logLatency;::);10000;0];

              .qsp.run
                  .qsp.read.fromStream[]
                  .qsp.map[{[op;md;data] .qsp.set[op;md;.z.p-data 2];data}; .qsp.use`name`state!(`latencyCacher; ())]
                  .qsp.filter[{`trace=x 0}]
                  .qsp.map[traceMapFn]
                  .qsp.write.toStream[]
    sm:
      source: south
      tiers:
        - name: streaming
          mount: rdb
        - name: interval
          mount: idb
          schedule:
            freq: 00:10:00
            snap: 00:00:00
        - name: recent
          mount: hdb
          schedule:
            freq: 1D00:00:00
            snap:   01:35:00
          retain:
            time: 3 Months
    dap:
      instances:
        idb:
          mountName: idb
        hdb:
          mountName: hdb
        rdb:
          tableLoad: empty
          mountName: rdb
          source: south
    sequencer:
      south:
        external: false
      north:
        external: true
        topicConfig:
          subTopic: "basic-assembly"

